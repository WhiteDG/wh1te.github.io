<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-08-25T09:12:30+08:00</updated><id>http://localhost:4000/</id><title type="html">Wh1te</title><author><name>Wh1te</name></author><entry><title type="html">Java 日志框架 Logback</title><link href="http://localhost:4000/java/2018/08/22/Java-%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6-Logback/" rel="alternate" type="text/html" title="Java 日志框架 Logback" /><published>2018-08-22T00:00:00+08:00</published><updated>2018-08-22T00:00:00+08:00</updated><id>http://localhost:4000/java/2018/08/22/Java%20%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%20Logback</id><content type="html" xml:base="http://localhost:4000/java/2018/08/22/Java-%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6-Logback/">&lt;h2 id=&quot;logback-简介&quot;&gt;Logback 简介&lt;/h2&gt;
&lt;p&gt;Logback 是一个稳定、高效、快速的 Java 日志框架，作为 log4j 的改良版，它与 log4j 相比拥有更多特性，也带来了很大的性能提升，具体改进可以查看&lt;a href=&quot;https://logback.qos.ch/reasonsToSwitch.html&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Logback 主要分为三个模块&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;logback-core：核心模块，作为 classic 和 access 模块的基础&lt;/li&gt;
  &lt;li&gt;logback-classic：实现了 slf4j API，配合 slf4j 使用，可以方便的切换其他日志框架&lt;/li&gt;
  &lt;li&gt;logback-access：​​与Servlet容器（如Tomcat和Jetty）集成，提供了 HTTP 访问日志接口&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;logback-加载&quot;&gt;Logback 加载&lt;/h2&gt;
&lt;p&gt;Logback 启动加载时会按一下顺序查找配置文件&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;在系统配置文件 System Properties 中寻找是否有 logback.configurationFile 对应的 value&lt;/li&gt;
  &lt;li&gt;在 classpath 下寻找是否有 logback.groovy（logback支持groovy与xml两种配置方式）&lt;/li&gt;
  &lt;li&gt;在 classpath 下寻找是否有 logback-test.xml&lt;/li&gt;
  &lt;li&gt;在 classpath 下寻找是否有 logback.xml&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当查找到任意一项配置存在后就不进行后续扫描了，会使用该配置文件进行初始化，如果没有查找到配置文件，Logback会创建一个向控制台输出日志的配置。&lt;/p&gt;

&lt;h2 id=&quot;logback-配置&quot;&gt;Logback 配置&lt;/h2&gt;

&lt;h3 id=&quot;根节点-configuration&quot;&gt;根节点 configuration&lt;/h3&gt;

&lt;p&gt;configuration 是配置文件的根节点，有三个属性：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;debug：默认值为false，设置为true时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。&lt;/li&gt;
  &lt;li&gt;scan：默认值为true，设置为true时，配置文件如果发生改变，将会被重新加载。&lt;/li&gt;
  &lt;li&gt;scanPeriod：当 scan 为 true 时，此属性才会生效。设置扫描配置文件是否有修改的时间间隔，默认单位是毫秒。默认的时间间隔为1分钟（60 second）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;配置代码：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scanPeriod=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;60 second&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;debug=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;设置上下文名称-contextname&quot;&gt;设置上下文名称 contextName&lt;/h3&gt;
&lt;p&gt;每个 logger 都关联到 logger 上下文，默认上下文名称为 “default”。但可以使用&amp;lt;contextName&amp;gt;设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。&lt;/p&gt;

&lt;p&gt;配置代码：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;contextName&amp;gt;&lt;/span&gt;new context name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/contextName&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;设置变量-property&quot;&gt;设置变量 property&lt;/h3&gt;
&lt;p&gt;property 是用来定义变量的标签，设置之后可以用 ${变量名} 访问，有三个属性：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;name：变量名称&lt;/li&gt;
  &lt;li&gt;value：变量值&lt;/li&gt;
  &lt;li&gt;file：指定配置文件的路径，它的作用在于，如果有多个配置信息的话，可以直接写在配置文件中，然后通过file引入&lt;/li&gt;
  &lt;li&gt;resource：作用与 file 一样，不同的是它可以直接从 classpath 路径下引入配置文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;配置代码：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- name value 形式 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;APP_Name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyApp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;contextName&amp;gt;&lt;/span&gt;${APP_Name}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/contextName&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- file 形式 --&amp;gt;&lt;/span&gt;
variables.properties:
APP_Name=MyApp
LOG_PATH=logs

&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/main/java/config/variables.properties&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;contextName&amp;gt;&lt;/span&gt;${APP_Name}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/contextName&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- resource 形式 --&amp;gt;&lt;/span&gt;
variables.properties:
APP_Name=MyApp
LOG_PATH=logs

&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;variables.properties&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;contextName&amp;gt;&lt;/span&gt;${APP_Name}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/contextName&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;configuration-子节点-loggerroot&quot;&gt;configuration 子节点 logger、root&lt;/h3&gt;

&lt;p&gt;logger 用来设置某一个类或者某个包的日志输出级别、以及输出位置（指定 appender），有三个属性：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;name：指定的包名或者类名&lt;/li&gt;
  &lt;li&gt;level：输出日志级别，如果未设置此级别，那么当前 logger 会向上继承最近一个非空级别，root 默认有一个 level 为 debug&lt;/li&gt;
  &lt;li&gt;additivity：是否将日志向上级传递，默认为 true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;logger 通过设置子节点 appender-ref 来指定日志输出位置，一个 logger 可以设置多个 appender-ref &lt;br /&gt;
配置代码：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Pattern&amp;gt;&lt;/span&gt;[%d{HH:mm:ss.SSS}] [%5level] [%thread] %logger{36} %msg%n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Pattern&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;charset&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/charset&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;logger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INFO&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;additivity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/logger&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;logger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X.Y&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;additivity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/logger&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;root 是一个特殊的 logger , 是所有 logger 的根节点，因为已经被命名为 root 同时也没有父级别，所以只有一个属性 level，默认为 DEBUG &lt;br /&gt;
配置代码：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;root&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ASYNC&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;level 继承示例1：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;logger name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;level&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;实际 level&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;root&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DEBUG&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DEBUG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;未设置&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DEBUG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X.Y&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;未设置&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DEBUG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X.Y.Z&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;未设置&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DEBUG&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;示例1只有 root 设置了一个级别，X，X.Y 和 X.Y.Z 这三个 logger 未设置日志输出级别，因此向上继承 root 的级别，即 DEBUG&lt;/p&gt;

&lt;p&gt;level 继承示例2：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;logger name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;level&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;实际 level&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;root&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ERROR&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ERROR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INFO&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INFO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X.Y&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DEBUG&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DEBUG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X.Y.Z&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;WARN&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;WARN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;示例2所有 logger 都设置了一个日志级别，等级继承不起作用。&lt;/p&gt;

&lt;p&gt;level 继承示例3：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;logger name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;level&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;实际 level&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;root&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DEBUG&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DEBUG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INFO&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INFO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X.Y&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;未设置&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INFO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X.Y.Z&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;WARN&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;WARN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;示例3 X.Y 没有设置日志级别，向上继承最近一个有日志级别的 logger X 的值。&lt;/p&gt;

&lt;p&gt;level 继承示例4：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;logger name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;level&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;实际 level&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;root&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DEBUG&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DEBUG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INFO&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INFO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X.Y&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;未设置&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INFO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X.Y.Z&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;未设置&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INFO&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;示例4 X.Y 和 X.Y.Z 没有设置日志级别，向上继承最近一个有日志级别的 logger X 的值。&lt;/p&gt;

&lt;h3 id=&quot;configuration-子节点-appender&quot;&gt;configuration 子节点 appender&lt;/h3&gt;

&lt;p&gt;appender 是负责写日志的组件，有两个属性（使用时都必须配置）：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;name：设置 appender 的名称，供后面 logger 设置引用&lt;/li&gt;
  &lt;li&gt;class：设置 appender 的全路径类名，例：ch.qos.logback.core.ConsoleAppender&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;appender 可以包含零个或一个 layout ，零个或多个 encoder 元素以及零个或多个 filter 元素。除了这三个元素之外，还可以包含与 appender 类的 JavaBean 属性相对应的任意数量的元素，如： file 指定日志文件名称。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;layout：对日志进行格式化&lt;/li&gt;
  &lt;li&gt;encoder： encoder 是0.9.19版本之后引进的，以前的版本使用 layout ，logback极力推荐的是使用 encoder 而不是 layout&lt;/li&gt;
  &lt;li&gt;filter：对日志进行过滤&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;appender 常用的有以下几种：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ConsoleAppender：输出到控制台，或者更确切地说是输出到 System.out 或 System.err，前者是默认目标。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%msg%n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&amp;gt;&lt;/span&gt;
        System.err
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;FileAppender：输出到文件，目标文件由 file 指定。如果该文件已存在，则根据 append 属性的值确定追加或者清空文件。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FILE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.FileAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;testFile.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;append&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/append&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- set immediateFlush to false for much higher logging throughput --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;immediateFlush&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/immediateFlush&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- encoders are assigned the type
         ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;RollingFileAppender：继承自 FileAppender ,提供了滚动记录的功能，先将日志记录到指定文件，当触发某个条件时，将日志记录到其他文件。有两个重要的子节点 rollingPolicy  和  triggeringPolicy
    &lt;ul&gt;
      &lt;li&gt;rollingPolicy：指定发生滚动时 RollingFileAppender 的行为，例如可以切换日志文件&lt;/li&gt;
      &lt;li&gt;triggeringPolicy：指定 RollingFileAppender 何时触发滚动。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FILE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;logFile.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 根据时间来制定滚动策略，既负责滚动也负责触发滚动。 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 每天生成日志文件 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;fileNamePattern&amp;gt;&lt;/span&gt;logFile.%d{yyyy-MM-dd}.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/fileNamePattern&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 保留最近30天的日志文件 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;maxHistory&amp;gt;&lt;/span&gt;30&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maxHistory&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;totalSizeCap&amp;gt;&lt;/span&gt;3GB&lt;span class=&quot;nt&quot;&gt;&amp;lt;/totalSizeCap&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rollingPolicy&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt; 

&lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROLLING&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;mylog.txt&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 基于文件大小和时间的滚动策略 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 每天生成日志文件 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;fileNamePattern&amp;gt;&lt;/span&gt;mylog-%d{yyyy-MM-dd}.%i.txt&lt;span class=&quot;nt&quot;&gt;&amp;lt;/fileNamePattern&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 每个日志文件最多 100MB, 保留 60 天, 最多 20 GB--&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;maxFileSize&amp;gt;&lt;/span&gt;100MB&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maxFileSize&amp;gt;&lt;/span&gt;    
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;maxHistory&amp;gt;&lt;/span&gt;60&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maxHistory&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;totalSizeCap&amp;gt;&lt;/span&gt;20GB&lt;span class=&quot;nt&quot;&gt;&amp;lt;/totalSizeCap&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rollingPolicy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%msg%n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;AsyncAppender：异步记录日志，它仅仅作为一个调度者，因此必须引用另一个 appender 来做日志输出。&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;discardingThreshold：默认情况下，当阻塞队列剩余容量为20％时，它将丢弃级别为 TRACE，DEBUG 和 INFO 的事件，仅保留级别为 WARN 和 ERROR 的事件。设置为0即可保留所有事件。&lt;/li&gt;
  &lt;li&gt;queueSize：阻塞队列的最大容量。默认情况下，queueSize 为 256。&lt;/li&gt;
  &lt;li&gt;appender-ref：表示 AsyncAppender 使用哪个具体的 appender 进行日志输出。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 异步输出 --&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ASYNC&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.classic.AsyncAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 不丢失日志 --&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;discardingThreshold&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/discardingThreshold&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;queueSize&amp;gt;&lt;/span&gt;256&lt;span class=&quot;nt&quot;&gt;&amp;lt;/queueSize&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 添加附加的appender,最多只能添加一个 --&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FILE&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
     
&lt;span class=&quot;nt&quot;&gt;&amp;lt;logger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ASYNC&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/logger&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Wh1te</name></author><category term="Java" /><category term="Logback" /><summary type="html">Logback 简介 Logback 是一个稳定、高效、快速的 Java 日志框架，作为 log4j 的改良版，它与 log4j 相比拥有更多特性，也带来了很大的性能提升，具体改进可以查看官方文档。</summary></entry><entry><title type="html">基于 CentOS 7 + Nginx + Tomcat 的负载均衡服务器的搭建</title><link href="http://localhost:4000/%E6%9C%8D%E5%8A%A1%E5%99%A8/2018/05/13/%E5%9F%BA%E4%BA%8E-CentOS-7-+-Nginx-+-Tomcat-%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA/" rel="alternate" type="text/html" title="基于 CentOS 7 + Nginx + Tomcat 的负载均衡服务器的搭建" /><published>2018-05-13T00:00:00+08:00</published><updated>2018-05-13T00:00:00+08:00</updated><id>http://localhost:4000/%E6%9C%8D%E5%8A%A1%E5%99%A8/2018/05/13/%E5%9F%BA%E4%BA%8E%20CentOS%207%20+%20Nginx%20+%20Tomcat%20%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA</id><content type="html" xml:base="http://localhost:4000/%E6%9C%8D%E5%8A%A1%E5%99%A8/2018/05/13/%E5%9F%BA%E4%BA%8E-CentOS-7-+-Nginx-+-Tomcat-%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA/">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文主要介绍如何在 CentOS 上从零开始使用 Nginx + Tomcat 搭建一个负载均衡服务器。在搭建过程中学习 Nginx 的基本使用方式以及 Tomcat 相关知识，进一步理解两者结合后的运行原理。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;nginx-安装&quot;&gt;Nginx 安装&lt;/h2&gt;
&lt;p&gt;使用源码编译的方式在 CentOS 上安装 Nginx 主要有以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装运行环境&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Nginx 是使用 C 语言开发的，编译依赖 gcc 环境，因此如果没有 gcc 需要先安装：&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; yum install -y gcc-c++
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;安装 Nginx 依赖库&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # rewrite模块需要 PCRE(Perl Compatible Regular Expressions),pcre-devel 库
 yum install -y pcre pcre-devel
 # gzip模块需要 zlib 库
 yum install -y zlib
 # ssl 功能需要 OpenSSL 库
 yum install -y openssl openssl-devel
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下载 Ngnix&lt;/p&gt;

    &lt;p&gt;从 &lt;a href=&quot;http://nginx.org/en/download.html&quot;&gt;Ngnix 官网&lt;/a&gt;下载最新稳定版，目前是 &lt;a href=&quot;http://nginx.org/download/nginx-1.12.2.tar.gz&quot;&gt;1.12.2&lt;/a&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # 如果还未安装 wget 请先执行安装命令
 yum install -y wget
 # 使用 wget 命令下载
 wget -c https://nginx.org/download/nginx-1.12.2.tar.gz
 # 解压文件
 tar -zxvf nginx-1.12.2.tar.gz
 # 进入解压后的目录
 cd nginx-1.12.2
 # 使用默认配置
 ./configure
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译安装 Nginx&lt;/p&gt;

    &lt;p&gt;编译安装十分简单，只需执行两个命令即可&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # 编译
 make
 # 安装
 make install
 # 安装目录默认为 /usr/local/nginx
 # 可以使用 whereis nginx 查找
 [root@localhost nginx-1.12.2]# whereis nginx
 nginx: /usr/local/nginx
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动测试&lt;/p&gt;

    &lt;p&gt;Ngnix 安装完成后即可启动测试是否可以正常运行&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # 进入 ngnix 执行文件目录
 cd /usr/local/ngnix/sbin
 # 启动
 # ./nginx  启动
 # ./nginx -s stop  停止（先查出 nginx 进程 id 再使用 kill 命令强制杀掉进程）
 # ./nginx -s quit  退出（等待 nginx 进程将任务处理完毕再停止）
 # ./nginx -s reload  重新加载，适用于修改了配置文件之后操作
 ./nginx
 # 启动之后可以通过 ps 命令查询 ngnix 进程
 ps aux|grep nginx
 # 访问localhost:80 测试 ngnix 是否正常运行，返回 nginx 欢迎页表示正常运行
 [root@localhost sbin]# curl localhost:80
 &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Welcome to nginx!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;35em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tahoma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Verdana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome to nginx!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;If you see this page, the nginx web server is successfully installed and
 working. Further configuration is required.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

 &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;For online documentation and support please refer to
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://nginx.org/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;nginx.org&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.&lt;span class=&quot;nt&quot;&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
 Commercial support is available at
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://nginx.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;nginx.com&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

 &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;&lt;/span&gt;Thank you for using nginx.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;tomcat-多实例部署配置&quot;&gt;Tomcat 多实例部署配置&lt;/h2&gt;

&lt;p&gt;Tomcat 单实例部署，即一个 Tomcat 服务器运行时，不存在负载均衡一说，因此，我们首先要做的就是实现 Tomcat 多实例部署，将我们的同一个应用程序部署在多个 Tomcat 服务器上同时运行。主要步骤如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安装 JDK（如果本机已经安装了则跳过第一步）
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 下载、解压 JDK8，下载地址可以从官网获取
wget http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz?AuthParam=1520068673_6f545cf32470b83658219011266e65b8
# 配置 Java 环境变量
vi /etc/profile
# 在文件尾部添加以下内容
export JAVA_HOME=/usr/local/jdk1.8.0_161 (这里是JDK所在目录)
export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export PATH=$PATH:$JAVA_HOME/bin
# 保存完成后重新加载 /etc/profile 文件
source /etc/profile
# 测试是否配置正确
[root@localhost local]# java -version
java version &quot;1.8.0_161&quot;
Java(TM) SE Runtime Environment (build 1.8.0_161-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;下载 Tomcat
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 下载 Tomcat 9
wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-9/v9.0.5/bin/apache-tomcat-9.0.5.tar.gz
# 解压
tar -zxvf apache-tomcat-9.0.5.tar.gz
# 为接下来的步骤做准备
# 重命名为tomcat-home
mv apache-tomcat-9.0.5 tomcat-home
# 复制第二份，重命名为tomcat-8080
cp -R tomcat-home tomcat-8080
# 复制第三份，重命名为tomcat-9090
cp -R tomcat-home tomcat-9090
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分离目录&lt;/p&gt;

    &lt;p&gt;首先介绍两个 tomcat 中比较重要的概念（通常也是两个系统变量）&lt;strong&gt;CATALINA_HOME&lt;/strong&gt; 和 &lt;strong&gt;CATALINA_BASE&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;CATALINA_HOME：即指向Tomcat安装路径的系统变量（安装目录）&lt;/li&gt;
      &lt;li&gt;CATALINA_BASE：即指向活跃配置路径的系统变量（工作目录）&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;通过设置这两个变量，就可以将tomcat的安装目录和工作目录分离，从而实现tomcat多实例的部署。
 下面就是 Tomcat 的基本目录结构，以及对应的作用。&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;目录&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;作用&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;bin&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;存放脚本文件，例如比较常用的启动和关闭脚本 startup.sh、shutdown.sh 等&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;conf&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;存放配置文件，最重要的是 server.xml，它是 tomcat 的主要配置文件&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;lib&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;Tomcat 运行需要的依赖包&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;log&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;存放日志文件&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;temp&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;存放运行时产生的临时文件&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;webapps&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;web 应用的默认目录&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;work&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;主要存放由JSP文件生成的servlet（java文件以及最终编译生成的class文件）&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;&lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/RUNNING.txt&quot;&gt;Tomcat 官方文档&lt;/a&gt; 说明了   CATALINA_HOME 路径下需要包含 bin 和 lib 目录，也就是两个支持 tomcat 运行的目录，而 CATALINA_BASE 可以包含所有目录，但是 bin 和 lib 不是必须的，缺省时会使用 CATALINA_HOME 中的 bin 和 lib。因此我们就可以使用一个 CATALINA_HOME 和多个 CATALINA_BASE 部署多个实例，这样的好处是便于管理和升级 Tomcat。上一步我们已经复制了三个 Tomcat，它们的作用分别是：&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;目录&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;作用&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;tomcat-home&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;作为 CATALINA_HOME，即只需要保留 bin 和 lib 两个文件夹&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;tomcat-8080&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;作为 CATALINA_BASE，需要保留除了 bin 和 lib 之外的其他文件夹，使用 8080 端口&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;tomcat-9090&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;同 tomcat-8080，使用 9090 端口&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;基于 CATALINA_HOME 和 CATALINA_BASE 分离目录&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # 根据上面表格整理完目录之后，目录结构如下：
 [root@localhost tomcat-home]# ls
 bin  lib  LICENSE  NOTICE  RELEASE-NOTES  RUNNING.txt
 [root@localhost tomcat-8080]# ls
 conf  LICENSE  logs  NOTICE  RELEASE-NOTES  RUNNING.txt  temp  webapps  work
 [root@localhost tomcat-9090]# ls
 conf  LICENSE  logs  NOTICE  RELEASE-NOTES  RUNNING.txt  temp  webapps  work
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改 Tomcat 配置文件&lt;/p&gt;

    &lt;p&gt;这一步主要是修改 server.xml 中端口的配置，在 server.xml 中配置了四个监听端口，分别是：&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Server port(默认8005): 监听关闭 tomcat 的 shutdown 命令&lt;/li&gt;
      &lt;li&gt;Connector port(默认8080)：监听 http 请求&lt;/li&gt;
      &lt;li&gt;AJP Connector port(默认8009)：监听 AJP 请求&lt;/li&gt;
      &lt;li&gt;redirectPort(默认8443)：重定向端口，出现在Connector配置中，如果该Connector仅支持非SSL的普通http请求，那么该端口会把https的请求转发到这个Redirect Port指定的端口。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;了解了监听的各个端口的作用之后就可以开始修改 server.xml 了，如果不使用 AJP 请求，那么我们只需要保证多实例中的 Server port 和 Connector port 不同即可。&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # tomcat-8080 保持默认配置即可
 # 修改 tomcat-9090 的配置，修改后的 /usr/local/tomcat-9090/conf/server.xml 内容如下：
 ...
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;Server&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;9005&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shutdown=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SHUTDOWN&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 ...
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;Connector&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;9090&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HTTP/1.1&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;connectionTimeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20000&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;redirectPort=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8443&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
 ...
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编写脚本&lt;/p&gt;

    &lt;p&gt;前面的准备工作做完之后就可以启动 tomcat 了，但是现在只有 tomcat-home/bin 目录下有 startup.sh 和 shutdown.sh，而我们要启动的 8080 和 9090 两个实例，因此我们就需要编写一段脚本，修改 CATALINA_BASE 来达到分别操作两个实例的目的。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;启动脚本 start.sh：&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;CUR_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;dirname &lt;span class=&quot;nv&quot;&gt;$BASH_SOURCE&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CATALINA_BASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;readlink -f &lt;span class=&quot;nv&quot;&gt;$CUR_DIR&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CATALINA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/tomcat-home&quot;&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$CATALINA_HOME&lt;/span&gt;/bin/startup.sh &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;$CATALINA_HOME&lt;/span&gt;/bin/startup.sh
 &lt;span class=&quot;k&quot;&gt;else
         &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CATALINA_HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/bin/startup.sh not exist&quot;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;停止脚本 stop.sh：&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;CUR_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;dirname &lt;span class=&quot;nv&quot;&gt;$BASH_SOURCE&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CATALINA_BASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;readlink -f &lt;span class=&quot;nv&quot;&gt;$CUR_DIR&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CATALINA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/tomcat-home&quot;&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$CATALINA_HOME&lt;/span&gt;/bin/shutdown.sh &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;$CATALINA_HOME&lt;/span&gt;/bin/shutdown.sh
 &lt;span class=&quot;k&quot;&gt;else
         &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CATALINA_HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/bin/shutdown.sh not exist&quot;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;将这两个脚本文件放在 tomcat-8080 和 tomcat-9090 的根目录下即可&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [root@localhost tomcat-8080]# ls
 conf     logs    RELEASE-NOTES  start.sh  temp     work
 LICENSE  NOTICE  RUNNING.txt    stop.sh   webapps

 # 启动 8080 端口的 tomcat
 [root@localhost tomcat-8080]# ./start.sh
 Using CATALINA_BASE:   /usr/local/tomcat-8080
 Using CATALINA_HOME:   /usr/local/tomcat-home
 Using CATALINA_TMPDIR: /usr/local/tomcat-8080/temp
 Using JRE_HOME:        /usr/local/jdk1.8.0_161
 Using CLASSPATH:       /usr/local/tomcat-home/bin/bootstrap.jar:/usr/local/tomcat-home/bin/tomcat-juli.jar
 Tomcat started.
 # 停止
 [root@localhost tomcat-8080]# ./stop.sh
 Using CATALINA_BASE:   /usr/local/tomcat-8080
 Using CATALINA_HOME:   /usr/local/tomcat-home
 Using CATALINA_TMPDIR: /usr/local/tomcat-8080/temp
 Using JRE_HOME:        /usr/local/jdk1.8.0_161
 Using CLASSPATH:       /usr/local/tomcat-home/bin/bootstrap.jar:/usr/local/tomcat-home/bin/tomcat-juli.jar

&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;测试两个 Tomcat 是否同时正常运行&lt;/p&gt;

    &lt;p&gt;为了方便测试，在 /usr/local/tomcat-8080/webapps/ROOT 和 /usr/local/tomcat-9090/webapps/ROOT 目录下分别新建一个 index.html 文件，内容分别为 “tomcat-8080” 和 “tomcat-9090” 便于我们区分。完成之后使用 start.sh 启动两个实例，这里我们同样使用 curl 访问来测试。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # 访问 9090 端口，获取到 9090 的数据
 [root@localhost tomcat-9090]# curl localhost:9090
 &amp;lt;h1&amp;gt; tomcat-9090 &amp;lt;/h1&amp;gt;
 # 访问 8080 端口，获取到 8080 的数据
 [root@localhost tomcat-8080]# curl localhost:8080
 &amp;lt;h1&amp;gt; tomcat-8080 &amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;nginx-与-tomcat-结合&quot;&gt;Nginx 与 Tomcat 结合&lt;/h2&gt;

&lt;p&gt;Ngnix 和 Tomcat 结合实现负载均衡的需求大概是这样的：用户访问服务器的 8888 端口，Ngnix 接收到请求之后转发至 8080 端口或者 9090 端口由 Tomcat 处理。两个 Tomcat 部署了同一个应用，这样就可以实现负载均衡，可以由两个 Tomcat 同时处理用户请求。这里我们以 localhost 为例，开始配置 Ngnix&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;这里使用 localhost 作为示例，正式使用时在配置文件中使用域名替换 localhost 即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 进入 ngnix 配置文件的目录
# 默认配置文件是 ngnix.conf
/usr/local/nginx/conf
# 这里我们新建一个 localhost.conf 单独配置，内容如下：
upstream localhost {
        server 127.0.0.1:8080;
        server 127.0.0.1:9090;
}
server
        {
                listen       8888;
                server_name localhost;
                index index.html index.htm index.jsp index.php;

                location / {
                        proxy_pass http://localhost;
                        proxy_set_header X-Real-IP $remote_addr;
                        add_header X-Slave $upstream_addr;
                }

        }

# 接着将在 nginx.conf 中引入 localhost.conf
...
http {
    ...
    # 引入 localhost.conf;
    include /usr/local/nginx/conf/localhost.conf;
    ...
}
...

# 完成配置文件修改之后可以通过 ./nginx -t 命令测试配置文件是否正确
cd /usr/local/nginx/sbin/
./nginx -t
# 出现下面提示表示配置正确，如果有误的话检查配置文件
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful

# 重载 ngnix 配置文件
./nginx -s reload
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至此，Nginx + Tomcat 的负责均衡服务器已经搭建完成，现在访问 localhost:8888 就可以看到两个 Tomcat 都能处理来自 8888 端口的请求了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost sbin]# curl localhost:8888
&amp;lt;h1&amp;gt; tomcat-8080 &amp;lt;/h1&amp;gt;
[root@localhost sbin]# curl localhost:8888
&amp;lt;h1&amp;gt; tomcat-9090 &amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;负载均衡策略&quot;&gt;负载均衡策略&lt;/h2&gt;

&lt;p&gt;上面我们使用的是 Nginx 默认的负载均衡策略，我们也可以根据自己需求配置其他的策略，Nginx 提供的策略主要有以下几种：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;轮询（默认）&lt;/p&gt;

    &lt;p&gt;每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器挂掉，能自动忽略该服务器。&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;upstream localhost {&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;server 127.0.0.1:8080;&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;server 127.0.0.1:9090;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;权重&lt;/p&gt;

    &lt;p&gt;根据配置的权重去分配给不同的服务器处理，适用于服务器性能有差距的情况，可以个高性能的服务器分配高权重&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;upstream localhost {&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;server 127.0.0.1:8080 weight=1;&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;server 127.0.0.1:9090 weight=3;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IP 绑定 ip_hash&lt;/p&gt;

    &lt;p&gt;每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;upstream localhost {&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;ip_hash;&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;server 127.0.0.1:8080;&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;server 127.0.0.1:9090;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最少连接&lt;/p&gt;

    &lt;p&gt;将请求分配给当前连接数最少的服务器&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;upstream localhost {&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;least_conn;&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;server 127.0.0.1:8080;&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;server 127.0.0.1:9090;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;以上，在 CentOS 上使用 Nginx + Tomcat 搭建负载均衡服务器已经完成，搭建过程中主要是理解如何利用 CATALINA_HOME 和 CATALINA_BASE 实现 Tomcat 的多实例部署，在完成 Tomcat 多实例部署的基础上结合 Nginx 实现负载均衡就很简单了。&lt;/p&gt;</content><author><name>Wh1te</name></author><category term="Nginx" /><category term="Tomcat" /><summary type="html">前言 本文主要介绍如何在 CentOS 上从零开始使用 Nginx + Tomcat 搭建一个负载均衡服务器。在搭建过程中学习 Nginx 的基本使用方式以及 Tomcat 相关知识，进一步理解两者结合后的运行原理。</summary></entry></feed>